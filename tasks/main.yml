---
# we cannot have any dots in the labels, so we clean that up here
- name: set service_fqdn_dotless
  set_fact:
    service_fqdn_dotless: "{{ service_fqdn | regex_replace('\\.', '_') }}{{ service_discriminator }}"

- name: ensure local data dir
  ansible.builtin.file:
    path: "{{ service_local_data_dir }}"
    owner: "{{ service_role_owner }}"
    group: "{{ service_role_group }}"
    mode: 0760
    state: directory

- name: build the label file name
  set_fact:
    service_label_file: "{{ service_local_data_dir }}/{{ service_fqdn_dotless }}"

- name: template the dynamic labels file
  ansible.builtin.template:
    src: traefik-dynamic-labels.j2
    dest: "{{ service_label_file }}"
    owner: "{{ service_role_owner }}"
    group: "{{ service_role_group }}"
    mode: 0640
  when: not service_remove

- name: read label file
  ansible.builtin.slurp:
    src: "{{ service_label_file }}"
  register: _service_labels
  when: not service_remove

- debug:
    msg: >
      {{ _service_labels['content'] | b64decode }}
  when: service_dry_run

- debug:
    var: _service_labels
  when: service_dry_run

- name: build the redis-cli command when we use a password
  when: (traefik_redis_password | default("") | length > 0) and not service_dry_run
  set_fact:
    _traefik_redis_password_cli: "-a {{ traefik_redis_password }}"

- name: clear redis keys
  delegate_to: "{{ service_delegate_to }}"
  become: "{{ service_delegate_become }}"
  ansible.builtin.shell:
    cmd: >
      redis-cli -h {{ traefik_redis_bind_ip }} -p {{ traefik_redis_bind_port }} --scan --pattern "traefik/*/*{{ service_fqdn_dotless }}*/*" | xargs redis-cli -h {{ traefik_redis_bind_ip }} -p {{ traefik_redis_bind_port }} del

- name: set traefik keys
  when: not service_remove
  delegate_to: "{{ service_delegate_to }}"
  become: "{{ service_delegate_become }}"
  community.general.redis_data:
    login_host: "{{ traefik_redis_bind_ip }}"
    login_port: "{{ traefik_redis_bind_port }}"
    tls: "{{ traefik_use_tls }}"
    key: "{{ item.split('=', 1)[0] | regex_replace('\\.', '/') }}"
    value: "{{ item.split('=', 1)[1] }}"
    state: "{{ service_remove | ternary('absent', 'present') }}"
  loop: "{{ (_service_labels['content'] | b64decode).splitlines() }}"

- name: cleanup label file
  ansible.builtin.file:
    path: "{{ service_label_file }}"
    state: absent
  when: not service_dry_run
